{"mappings":"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","sources":["script.js"],"sourcesContent":["'use strict';\n\nconst form = document.querySelector('.form');\nconst containerWorkouts = document.querySelector('.workouts');\nconst inputType = document.querySelector('.form__input--type');\nconst inputDistance = document.querySelector('.form__input--distance');\nconst inputDuration = document.querySelector('.form__input--duration');\nconst inputCadence = document.querySelector('.form__input--cadence');\nconst inputElevation = document.querySelector('.form__input--elevation');\n\nclass Workout {\n  date = new Date();\n  id = (Date.now() + ' ').slice(-10);\n  clicks = 0;\n\n  constructor(coords, distance, duration) {\n    this.coords = coords;\n    this.distance = distance; //km\n    this.duration = duration; //min\n  }\n  _setDescription() {\n    // prettier-ignore\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${\n      months[this.date.getMonth()]\n    } ${this.date.getDate()}`;\n  }\n\n  click() {\n    this.clicks++;\n  }\n}\n\nclass Running extends Workout {\n  type = 'running';\n  constructor(coords, distance, duration, cadence) {\n    super(coords, distance, duration);\n    this.cadence = cadence;\n    this.calcPace();\n    this._setDescription();\n  }\n\n  calcPace() {\n    //min/Km\n    this.pace = this.duration / this.distance;\n    return this;\n  }\n}\n\nclass Cycling extends Workout {\n  type = 'cycling';\n  constructor(coords, distance, duration, elevationGain) {\n    super(coords, distance, duration);\n    this.elevationGain = elevationGain;\n    this.calcSpeed();\n    this._setDescription();\n  }\n\n  calcSpeed() {\n    //Km/h\n    this.speed = this.distance / (this.duration / 60);\n    return this.speed;\n  }\n}\n\n// const run = new Running([39, -12], 5.2, 24, 178);\n// const cycling = new Cycling([39, -12], 27, 95, 522);\n//\n\n//Application Architecture\nclass App {\n  #map;\n  #mapZoomLevel = 13;\n  #mapEvent;\n  #workouts = [];\n  constructor() {\n    //get users position\n    this._getPosition();\n\n    //get data from local storage\n    this._getLocalStorage();\n\n    //Attach event handlers\n    form.addEventListener('submit', this._newWorkout.bind(this));\n    inputType.addEventListener('change', this._toggleElevationField);\n    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));\n  }\n\n  _getPosition() {\n    if (navigator.geolocation)\n      navigator.geolocation.getCurrentPosition(\n        this._loadMap.bind(this),\n        function () {\n          alert('Could not get your position');\n        }\n      );\n  }\n\n  _loadMap(position) {\n    const { latitude } = position.coords;\n    const { longitude } = position.coords;\n    const coords = [latitude, longitude];\n    this.#map = L.map('map').setView(coords, this.#mapZoomLevel);\n    //   (map);\n\n    // L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    }).addTo(this.#map);\n\n    //Handling clicks on map\n    this.#map.on('click', this._showForm.bind(this));\n\n    this.#workouts.forEach(work => {\n      this._renderWorkoutMarker(work);\n    });\n  }\n\n  _showForm(mapE) {\n    this.#mapEvent = mapE;\n    form.classList.remove('hidden');\n    inputDistance.focus();\n  }\n\n  _hideForm() {\n    // Empty inputs\n    inputDistance.value =\n      inputDuration.value =\n      inputCadence.value =\n      inputDuration.value =\n        '';\n    form.getElementsByClassName.display = 'none';\n    form.classList.add('hidden');\n    setTimeout(() => (form.getElementsByClassName.display = 'grid'), 1000);\n  }\n\n  _toggleElevationField() {\n    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');\n    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');\n  }\n\n  _newWorkout(e) {\n    const validInputs = (...inputs) =>\n      inputs.every(inp => Number.isFinite(inp));\n    const allPositive = (...inputs) => inputs.every(inp => inp > 0);\n    e.preventDefault();\n\n    //Get data from form\n    const type = inputType.value;\n    const distance = +inputDistance.value;\n    const duration = +inputDuration.value;\n    const { lat, lng } = this.#mapEvent.latlng;\n    let workout;\n\n    //If workout is running, create running object\n    if (type === 'running') {\n      const cadence = +inputCadence.value;\n      //check if data is valid\n      if (\n        // !Number.isFinite(distance) ||\n        // !Number.isFinite(duration) ||\n        // !Number.isFinite(cadence)\n        !validInputs(distance, duration, cadence) ||\n        !allPositive(distance, duration, cadence)\n      )\n        return alert('Input have to be positive numbers!');\n\n      workout = new Running([lat, lng], distance, duration, cadence);\n    }\n\n    //if workout is cycling, create cycling object\n    if (type === 'cycling') {\n      const elevation = +inputElevation.value;\n      if (\n        !validInputs(distance, duration, elevation) ||\n        !allPositive(distance, duration)\n      )\n        return alert('Input have to be positive numbers!');\n\n      workout = new Cycling([lat, lng], distance, duration, elevation);\n    }\n\n    //Add new object to workout\n    this.#workouts.push(workout);\n    workout;\n\n    //Render workout on top as marker\n    this._renderWorkoutMarker(workout);\n\n    //Render workout on list\n    this._renderWorkout(workout);\n\n    //Hide form and clear input fields\n    this._hideForm();\n\n    //Set local storage to all workouts\n    this._setLocalStorage();\n  }\n  _renderWorkoutMarker(workout) {\n    L.marker(workout.coords)\n      .addTo(this.#map)\n      .bindPopup(\n        L.popup({\n          maxWidth: 250,\n          minWidth: 100,\n          autoClose: false,\n          closeOnClick: false,\n          className: `${workout.type}-popup`,\n        })\n      )\n      .setPopupContent(\n        `${workout.name === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'} ${workout.description}`\n      )\n      .openPopup();\n  }\n\n  _renderWorkout(workout) {\n    let html = `\n        <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n            <h2 class=\"workout__title\">${workout.description}</h2>\n            <div class=\"workout__details\">\n                <span class=\"workout__icon\">${\n                  workout.name === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'\n                }</span>\n                <span class=\"workout__value\">${workout.distance}</span>\n                <span class=\"workout__unit\">km</span>\n            </div>\n            <div class=\"workout__details\">\n                <span class=\"workout__icon\">‚è±</span>\n                <span class=\"workout__value\">${workout.id}</span>\n                <span class=\"workout__unit\">min</span>\n          </div>\n    `;\n\n    if (workout.type === 'running')\n      html += `\n        <div class=\"workout__details\">\n            <span class=\"workout__icon\">‚ö°Ô∏è</span>\n            <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\n            <span class=\"workout__unit\">min/km</span>\n        </div>\n        <div class=\"workout__details\">\n            <span class=\"workout__icon\">ü¶∂üèº</span>\n            <span class=\"workout__value\">178</span>\n            <span class=\"workout__unit\">spm</span>\n        </div>\n    </li>\n    `;\n\n    if (workout.type === 'cycling')\n      html += `\n      </div>\n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">‚ö°Ô∏è</span>\n            <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\n            <span class=\"workout__unit\">km/h</span>\n          </div>\n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">‚õ∞</span>\n            <span class=\"workout__value\">${workout.elevationGain}</span>\n            <span class=\"workout__unit\">m</span>\n          </div>\n        </li> -->\n    `;\n    form.insertAdjacentHTML('afterend', html);\n  }\n\n  _moveToPopup(e) {\n    const workoutEl = e.target.closest('.workout');\n    if (!workoutEl) return;\n    const workout = this.#workouts.find(\n      work => work.id === workoutEl.dataset.id\n    );\n\n    this.#map.setView(workout.coords, this.#mapZoomLevel, {\n      animate: true,\n      pan: {\n        duration: 1,\n      },\n    });\n  }\n\n  _setLocalStorage() {\n    localStorage.setItem('workouts', JSON.stringify(this.#workouts));\n  }\n  _getLocalStorage() {\n    const data = JSON.parse(localStorage.getItem('workouts'));\n\n    if (!data) return;\n\n    this.#workouts = data;\n\n    this.#workouts.forEach(work => {\n      this._renderWorkout(work);\n    });\n  }\n\n  reset() {\n    localStorage.removeItem('workouts');\n    location.reload();\n  }\n}\n\nconst app = new App();\n"],"names":["form","document","querySelector","containerWorkouts","inputType","inputDistance","inputDuration","inputCadence","inputElevation","Workout","date","Date","id","now","slice","clicks","constructor","coords","distance","duration","this","_setDescription","description","type","toUpperCase","getMonth","getDate","click","Running","cadence","super","calcPace","pace","Cycling","elevationGain","calcSpeed","speed","App","map","mapZoomLevel","mapEvent","workouts","_getPosition","_getLocalStorage","addEventListener","_newWorkout","bind","_toggleElevationField","_moveToPopup","navigator","geolocation","getCurrentPosition","_loadMap","alert","position","latitude","longitude","L","setView","tileLayer","attribution","addTo","on","_showForm","forEach","work","_renderWorkoutMarker","mapE","classList","remove","focus","_hideForm","value","getElementsByClassName","display","add","setTimeout","closest","toggle","e","validInputs","inputs","every","inp","Number","isFinite","allPositive","preventDefault","lat","lng","latlng","workout","elevation","push","_renderWorkout","_setLocalStorage","marker","bindPopup","popup","maxWidth","minWidth","autoClose","closeOnClick","className","setPopupContent","name","openPopup","html","toFixed","insertAdjacentHTML","workoutEl","target","find","dataset","animate","pan","localStorage","setItem","JSON","stringify","data","parse","getItem","reset","removeItem","location","reload","app"],"version":3,"file":"index.63f912dc.js.map"}